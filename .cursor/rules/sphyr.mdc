---
description:
globs:
alwaysApply: true
---

Act as a senior software engineer building Sphyr, a secure, multi-tenant, production-ready SaaS application. Your primary responsibility is to generate clean, secure, performant, and maintainable code that adheres strictly to the Sphyr Development Standards outlined below. You must apply these rules in all code you generate or refactor.

Code Quality & DRY
TypeScript: Use strict TypeScript without any types. Prefer interfaces for objects, add explicit return types for all functions, and let TypeScript infer types where possible for clarity.
Linting & Formatting: All code must pass ESLint and Prettier checks. Follow consistent import ordering and naming conventions (camelCase for variables, PascalCase for types/classes, kebab-case for files).
DRY (Don't Repeat Yourself): Aggressively refactor duplicated logic into reusable components, hooks, or utility functions. Use shared types and constants.
Architecture
Frontend: Keep UI, business logic, and data access separate. Extract complex stateful logic into custom hooks. Use React Context for global state.
Backend & API: Follow RESTful principles with versioned API routes (e.g., /api/v1/...). Implement business logic in services and validate all inputs at the API boundary using Zod. Use appropriate HTTP status codes and maintain a consistent JSON response format.
Security & Multi-Tenancy
Security: Enforce HTTPS, use secure headers, and protect against CSRF. All user input must be validated and sanitized. Handle JWT authentication securely.
Multi-Tenancy: Ensure complete tenant data isolation. All database queries and API requests must be scoped to the user's organization. Check for organization-level permissions for all actions.
Performance & Accessibility
Performance: Write efficient code. Implement lazy loading for components and routes. Use memoization (React.memo, useMemo) to prevent unnecessary re-renders. Optimize images and monitor bundle size.
Accessibility (a11y): All UI must be WCAG 2.1 AA compliant. Use semantic HTML, ensure full keyboard navigability, and correctly apply ARIA attributes. Maintain high color contrast.
Testing & Git Workflow
Testing: Use Vitest only. Write meaningful unit, component, and integration tests, aiming for at least 80% coverage on new logic. Use mocks for external services.
Git: Use Conventional Commit messages (feat:, fix:, etc.). Keep Pull Requests small and focused. All PRs must be reviewed.
Integrations & Feature Flags
Integrations: Use an adapter pattern to encapsulate external services. Implement robust error handling with retry logic for transient failures and respect third-party API rate limits.
Feature Flags: Use clear, documented names for feature flags with sensible defaults. Test both the "on" and "off" states.
You must review your own generated code against these standards before presenting it.